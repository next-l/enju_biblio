.row
  #submenu.col-md-3
    ul.list-group
      - if policy(SeriesStatement).create?
        li.list-group-item
          = link_to t('page.new', model: t('activerecord.models.series_statement')), new_series_statement_path
  #content_list.col-md-9
    h1.title
      = t('page.listing', model: t('activerecord.models.series_statement'))
    p#notice
      = notice
    .search_form
      = form_for :series_statements, url: series_statements_path, html: {method: 'get', class: 'form-inline'} do
        p
          = label_tag :search_form_top, t('page.search_term')
          | : 
          => search_field_tag 'query', h(@query), {id: 'search_form_top', class: 'form-control', placeholder: t('page.search_term')}
          = submit_tag t('page.search'), class: 'btn btn-default'
          = set_focus_on_search_form
    table.table.table-striped.index
      tr
        th#position
        th
          = t('activerecord.attributes.series_statement.original_title')
        th
      - @series_statements.each do |series_statement|
        |  <tr class="line
        = cycle("0", "1")
        | "> 
        td
          - if @query.present? and policy(series_statement).update?
            = move_position(series_statement)
        td
          strong
            = link_to series_statement.original_title, series_statement
        td
          => link_to t('page.edit'), edit_series_statement_path(series_statement) if policy(series_statement).update?
          => link_to t('page.destroy'), series_statement, data: {confirm: t('page.are_you_sure')}, method: :delete if policy(series_statement).destroy?
    = paginate(@series_statements)
